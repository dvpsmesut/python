---
- hosts: all
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce=18.06.2~ce~3-0~ubuntu
      - containerd.io
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet=1.14.0-00
        - kubeadm=1.14.0-00
        - kubectl=1.14.0-00

  - name: Get IP eth1 addr
    shell: ifconfig |egrep -A1 enp0s8 | grep 'inet' | sed -n '1p'|awk '{print  $2}'|cut -c6-22
    register: output

  - name: Configure kubelet
    shell: echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip={{ output.stdout }}"' >> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10" --pod-network-cidr=172.16.0.0/16
    
  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/vagrant/.kube
     - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
     - chown vagrant:vagrant -R /home/vagrant/.kube

  - name: Disable IP tables
    shell: |
      echo "net.bridge.bridge-nf-call-iptables=1" >> /etc/sysctl.conf
      echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
      sysctl -p

  
  - name: Install wavenet pod network
    become: false
    shell: |
      kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    become: false
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"


### Prepare CI/CD Process
  
  - name: Install helm
    shell: |
      wget -P /tmp https://get.helm.sh/helm-v3.0.2-linux-amd64.tar.gz
      tar xzvf /tmp/helm-v3.0.2-linux-amd64.tar.gz -C /tmp
      mv /tmp/linux-amd64/helm /usr/bin
  
  - name: Install NFS Server
    shell: |
      - apt install nfs-kernel-server
      - mkdir -p /export/mysql_db
      - mkdir -p /export/jenkins_home
      - chown nobody:nogroup /export/*
      - chmod 777 /export/*

  - name: Give nfs access to nodes 
    lineinfile:
      path: /etc/exports
      line: /export/mysql_db 192.168.50.0/24(rw,sync,no_subtree_check,no_root_squash)
      line: /export/jenkins_home 192.168.50.0/24(rw,sync,no_subtree_check,no_root_squash)
  
  - name: Export shared volumes
    command: "{{ item }}"
    with_items:
      - exportfs -a
      - systemctl restart nfs-kernel-server

  - name: Install pwgen password generator
    apt:
      name: pwgen
      state: present

  - name: Generate mysql root password
    shell: pwgen -s -N 1 16 | awk '{print $1}'
    register: mysql_root_password

  - name: Create kubenetes mysql root password secret
    become: false
    shell: kubectl create secret generic mysql-dev-db-root-password --from-literal=db_root_password="{{ mysql_root_password.stdout_lines[0] }}"
    run_once: true

  - name: Generate mysql python_app_dev_user password
    shell: pwgen -s -N 1 16 | awk '{print $1}'
    register: mysql_user_password

  - name: Create kubenetes mysql python_app_dev_user password secret
    become: false
    shell: kubectl create secret generic mysql-dev-db-user-password --from-literal=db_user_password="{{ mysql_user_password.stdout_lines[0] }}"
    run_once: true

  - name: Create persisten volume for mysql db
    become: false
    shell: |
      kubectl apply -f "https://raw.githubusercontent.com/dvpsmesut/python/dev/k8s/pv001-mysql-db.yaml"
      kubectl apply -f "https://raw.githubusercontent.com/dvpsmesut/python/dev/k8s/pvc001-mysql-db.yaml"

  - name: Install mysql db, create required user and db for application
    become: false
    shell: |
      cat <<EOF | kubectl -f -
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: mysql-initdb-config
      data:
        initdb.sql: |
          create database python_app;
          #create user 'python_app_dev_user'@'localhost' identified by '"{{ mysql_user_password.stdout_lines[0] }}"';
          #create user 'python_app_dev_user'@'%' identified by '"{{ mysql_user_password.stdout_lines[0] }}"';
          grant all privileges on python_app.* to 'python_app_dev_user'@'localhost' identified by '"{{ mysql_user_password.stdout_lines[0] }}"';
          grant all privileges on python_app.* to 'python_app_dev_user'@'%' identified by '"{{ mysql_user_password.stdout_lines[0] }}"';
      EOF
      #
      kubectl apply -f "https://raw.githubusercontent.com/dvpsmesut/python/dev/k8s/mysql-dev-deployment.yaml"
      kubectl apply -f "https://raw.githubusercontent.com/dvpsmesut/python/dev/k8s/mysql-dev-svc.yaml"

  - name: deploy python app svc
    become: false
    shell:
      kubectl apply -f "https://raw.githubusercontent.com/dvpsmesut/python/dev/k8s/app-svc.yaml"

  handlers:
  - name: docker status
    service: name=docker state=started

  
